--1. Consultar la cantidad de likes por publicación.
SELECT * FROM TBL_PUBLICACIONES;

SELECT  B.CODIGO_PUBLICACION, 
        B.CONTENIDO_PUBLICACION,
        COUNT(A.CODIGO_PUBLICACION) AS CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES A
RIGHT JOIN TBL_PUBLICACIONES B
ON (A.CODIGO_PUBLICACION = B.CODIGO_PUBLICACION)
GROUP BY B.CODIGO_PUBLICACION, B.CONTENIDO_PUBLICACION;

--2. Consultar la cantidad de likes por fotografía.
SELECT * FROM TBL_FOTOS;
SELECT * FROM TBL_LIKE_FOTOGRAFIAS;

SELECT  A.CODIGO_FOTO, A.DESCRIPCION_FOTO, 
        COUNT(B.CODIGO_FOTO) CANTIDAD_LIKES
FROM TBL_FOTOS A
LEFT JOIN TBL_LIKE_FOTOGRAFIAS B
ON A.CODIGO_FOTO = B.CODIGO_FOTO
GROUP BY A.CODIGO_FOTO, A.DESCRIPCION_FOTO;

--3. Consultar los grupos en los cuales la cantidad de usuarios sea 
--mayor que 5, mostrar el nombre
--del grupo y la cantidad de usuarios.

SELECT  A.CODIGO_GRUPO,
        A.NOMBRE_GRUPO,
        COUNT(B.CODIGO_USUARIO) AS CANTIDAD_USUARIOS
FROM TBL_GRUPOS A
LEFT JOIN TBL_GRUPOS_X_USUARIO B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
GROUP BY A.CODIGO_GRUPO,
        A.NOMBRE_GRUPO
HAVING COUNT(B.CODIGO_USUARIO) > 5;

--4. Mostrar la cantidad de amistades pendientes y rechazadas.
SELECT  B.NOMBRE_ESTATUS, 
        COUNT(*) CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
WHERE NOMBRE_ESTATUS IN ('PENDIENTE', 'RECHAZADA')
GROUP BY B.NOMBRE_ESTATUS
ORDER BY NOMBRE_ESTATUS;

SELECT * FROM TBL_ESTATUS_SOLICITUDES;

--1	CONFIRMADA
--2	RECHAZADA
--3	PENDIENTE


--5. Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).
SELECT ROWNUM, A.* 
FROM (
    SELECT  A.CODIGO_USUARIO, 
            C.NOMBRE_USUARIO,
            B.NOMBRE_ESTATUS, 
            COUNT(*) CANTIDAD_SOLICITUDES
    FROM TBL_AMIGOS A
    INNER JOIN TBL_ESTATUS_SOLICITUDES B
    ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
    INNER JOIN TBL_USUARIOS C
    ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
    WHERE NOMBRE_ESTATUS IN ('CONFIRMADA')
    GROUP BY A.CODIGO_USUARIO, C.NOMBRE_USUARIO, B.NOMBRE_ESTATUS
    ORDER BY 3 DESC
) A
WHERE ROWNUM = 1;


WITH SOLICITUDES_CONFIRMADAS AS (
    SELECT  A.CODIGO_USUARIO, 
            C.NOMBRE_USUARIO,
            B.NOMBRE_ESTATUS, 
            COUNT(*) CANTIDAD_SOLICITUDES
    FROM TBL_AMIGOS A
    INNER JOIN TBL_ESTATUS_SOLICITUDES B
    ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
    INNER JOIN TBL_USUARIOS C
    ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
    WHERE NOMBRE_ESTATUS IN ('CONFIRMADA')
    GROUP BY A.CODIGO_USUARIO, C.NOMBRE_USUARIO, B.NOMBRE_ESTATUS
)
SELECT *
FROM SOLICITUDES_CONFIRMADAS
WHERE CANTIDAD_SOLICITUDES = (
    SELECT MAX(CANTIDAD_SOLICITUDES)
    FROM SOLICITUDES_CONFIRMADAS
);



SELECT ROWNUM, X.* 
FROM (
    SELECT A.* FROM TBL_USUARIOS A
    ORDER BY EDAD DESC
) X
WHERE ROWNUM = 1;
--6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).

WITH SOLICITUDES_RECHAZADAS AS (
    SELECT  A.CODIGO_USUARIO, 
            C.NOMBRE_USUARIO,
            B.NOMBRE_ESTATUS, 
            COUNT(*) CANTIDAD_SOLICITUDES
    FROM TBL_AMIGOS A
    INNER JOIN TBL_ESTATUS_SOLICITUDES B
    ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
    INNER JOIN TBL_USUARIOS C
    ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
    WHERE NOMBRE_ESTATUS IN ('RECHAZADA')
    GROUP BY A.CODIGO_USUARIO, C.NOMBRE_USUARIO, B.NOMBRE_ESTATUS
)
SELECT *
FROM SOLICITUDES_RECHAZADAS
WHERE CANTIDAD_SOLICITUDES = (
    SELECT MAX(CANTIDAD_SOLICITUDES)
    FROM SOLICITUDES_RECHAZADAS
);

--7. Mostrar la cantidad de usuarios registrados mensualmente.
SELECT TO_CHAR(FECHA_REGISTRO,'MM/YYYY') MES,
        TO_CHAR(FECHA_REGISTRO,'MONTH') NOMBRE_MES,
        COUNT(*) CANTIDAD_USUARIOS
FROM TBL_USUARIOS
GROUP BY TO_CHAR(FECHA_REGISTRO,'MM/YYYY'),
    TO_CHAR(FECHA_REGISTRO,'MONTH')
ORDER BY 1;

--8. Mostrar la edad promedio de los usuarios por género.
SELECT GENERO_USUARIO, ROUND(AVG(EDAD),2) AS EDAD_PROMEDIO
FROM TBL_USUARIOS
GROUP BY GENERO_USUARIO;

--9. Con respecto al historial de accesos se necesita saber el 
--crecimiento de los accesos del día 19 de
--agosto del 2015 con respecto al día anterior, la fórmula para 
--calcular dicho crecimiento se
--muestra a continuación:
--((b-a)/a) * 100
--Donde:
--a = Cantidad de accesos del día anterior (18 de Agosto del 2015)
--b = Cantidad de accesos del día actual (19 de Agosto del 2015)
--Mostrar el resultado como un porcentaje (Concatenar %)

SELECT ((6-2)/2) * 100
FROM DUAL;

SELECT (
            (
                (
                    SELECT COUNT(*) AS ACCESOS_DIA_ACTUAL ---6 ACCESOS (200%)
                    FROM TBL_HISTORIAL_ACCESOS
                    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015', 'DD/MM/YYYY')
                )  -   
                (   SELECT COUNT(*) AS ACCESSOS_DIA_ANTERIOR---2 ACCESOS
                    FROM TBL_HISTORIAL_ACCESOS
                    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015', 'DD/MM/YYYY')
                )
            ) /
            (
                SELECT COUNT(*) AS ACCESSOS_DIA_ANTERIOR---2 ACCESOS
                FROM TBL_HISTORIAL_ACCESOS
                WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015', 'DD/MM/YYYY')
            )
        ) * 100 AS CRECIMIENTO
FROM DUAL;

WITH A AS (
    SELECT COUNT(*) AS ACCESOS_DIA_ANTERIOR---2 ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015', 'DD/MM/YYYY')
), 
B AS (
    SELECT COUNT(*) AS ACCESOS_DIA_ACTUAL ---6 ACCESOS (200%)
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015', 'DD/MM/YYYY')
)
SELECT (((B.ACCESOS_DIA_ACTUAL-A.ACCESOS_DIA_ANTERIOR)/A.ACCESOS_DIA_ANTERIOR) * 100) || '%'
            AS CRECIMIENTO
FROM A, B; -- PRODUCTO CARTESIANO


SELECT COUNT(*) AS ACCESOS_DIA_ACTUAL ---6 ACCESOS (200%)
FROM TBL_HISTORIAL_ACCESOS
WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19/08/2015', 'DD/MM/YYYY');

SELECT COUNT(*) AS ACCESSOS_DIA_ANTERIOR---2 ACCESOS
FROM TBL_HISTORIAL_ACCESOS
WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18/08/2015', 'DD/MM/YYYY');

--10. Crear una consulta que muestre lo siguiente:
--• Nombre del usuario.
--• País donde pertenece.
--• Cantidad de publicaciones que tiene.
--• Cantidad de amigos confirmados.
--• Cantidad de likes que ha dado.
--• Cantidad de fotos en las que ha sido etiquetado.
--• Cantidad de accesos en el historial.
--Tip: utilice subconsultas.

SELECT * FROM TBL_USUARIOS;
SELECT * FROM TBL_PUBLICACIONES;
SELECT * FROM TBL_PAISES;
SELECT * FROM TBL_AMIGOS;

WITH PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_PUBLICACIONES
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
AMIGOS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
LIKES_PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
LIKES_FOTOGRAFIAS AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS_FOTOGRAFIAS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_ETIQUETAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ACCESOS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) AS CANTIDAD_ACCESOS 
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT  A.CODIGO_USUARIO,
        A.NOMBRE_USUARIO,
        B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES, 0) AS CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS, 0) AS CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES,0) +
        NVL(F.CANTIDAD_LIKES,0) AS CANTIDAD_LIKES,
        NVL(G.CANTIDAD_ETIQUETAS,0) AS CANTIDAD_ETIQUETAS,
        NVL(H.CANTIDAD_ACCESOS,0) AS CANTIDAD_ACCESOS
FROM    TBL_USUARIOS A
INNER JOIN TBL_PAISES B
ON A.CODIGO_PAIS = B.CODIGO_PAIS
LEFT JOIN PUBLICACIONES C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN AMIGOS D
ON A.CODIGO_USUARIO = D.CODIGO_USUARIO
LEFT JOIN LIKES_PUBLICACIONES E
ON A.CODIGO_USUARIO = E.CODIGO_USUARIO
LEFT JOIN LIKES_FOTOGRAFIAS F
ON A.CODIGO_USUARIO = F.CODIGO_USUARIO
LEFT JOIN ETIQUETAS_FOTOGRAFIAS G
ON A.CODIGO_USUARIO = G.CODIGO_USUARIO
LEFT JOIN ACCESOS H
ON A.CODIGO_USUARIO = H.CODIGO_USUARIO;

SELECT  CODIGO_USUARIO, 
        COUNT(*) AS CANTIDAD_ACCESOS 
FROM TBL_HISTORIAL_ACCESOS
GROUP BY CODIGO_USUARIO;
--11. De la consulta anterior cree una vista materializada 

--VISTA CONVENCIONAL
CREATE OR REPLACE VIEW VW_USUARIOS AS
WITH PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_PUBLICACIONES
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
AMIGOS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
LIKES_PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
LIKES_FOTOGRAFIAS AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS_FOTOGRAFIAS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_ETIQUETAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ACCESOS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) AS CANTIDAD_ACCESOS 
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT  A.CODIGO_USUARIO,
        A.NOMBRE_USUARIO,
        B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES, 0) AS CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS, 0) AS CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES,0) +
        NVL(F.CANTIDAD_LIKES,0) AS CANTIDAD_LIKES,
        NVL(G.CANTIDAD_ETIQUETAS,0) AS CANTIDAD_ETIQUETAS,
        NVL(H.CANTIDAD_ACCESOS,0) AS CANTIDAD_ACCESOS
FROM    TBL_USUARIOS A
INNER JOIN TBL_PAISES B
ON A.CODIGO_PAIS = B.CODIGO_PAIS
LEFT JOIN PUBLICACIONES C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN AMIGOS D
ON A.CODIGO_USUARIO = D.CODIGO_USUARIO
LEFT JOIN LIKES_PUBLICACIONES E
ON A.CODIGO_USUARIO = E.CODIGO_USUARIO
LEFT JOIN LIKES_FOTOGRAFIAS F
ON A.CODIGO_USUARIO = F.CODIGO_USUARIO
LEFT JOIN ETIQUETAS_FOTOGRAFIAS G
ON A.CODIGO_USUARIO = G.CODIGO_USUARIO
LEFT JOIN ACCESOS H
ON A.CODIGO_USUARIO = H.CODIGO_USUARIO;


SELECT * 
FROM VW_USUARIOS;

--VISTA MATERIALIZADA
CREATE MATERIALIZED VIEW MVW_USUARIOS AS
WITH PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_PUBLICACIONES
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
AMIGOS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
LIKES_PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
LIKES_FOTOGRAFIAS AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS_FOTOGRAFIAS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) CANTIDAD_ETIQUETAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ACCESOS AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(*) AS CANTIDAD_ACCESOS 
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT  A.CODIGO_USUARIO,
        A.NOMBRE_USUARIO,
        B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES, 0) AS CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS, 0) AS CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES,0) +
        NVL(F.CANTIDAD_LIKES,0) AS CANTIDAD_LIKES,
        NVL(G.CANTIDAD_ETIQUETAS,0) AS CANTIDAD_ETIQUETAS,
        NVL(H.CANTIDAD_ACCESOS,0) AS CANTIDAD_ACCESOS
FROM    TBL_USUARIOS A
INNER JOIN TBL_PAISES B
ON A.CODIGO_PAIS = B.CODIGO_PAIS
LEFT JOIN PUBLICACIONES C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN AMIGOS D
ON A.CODIGO_USUARIO = D.CODIGO_USUARIO
LEFT JOIN LIKES_PUBLICACIONES E
ON A.CODIGO_USUARIO = E.CODIGO_USUARIO
LEFT JOIN LIKES_FOTOGRAFIAS F
ON A.CODIGO_USUARIO = F.CODIGO_USUARIO
LEFT JOIN ETIQUETAS_FOTOGRAFIAS G
ON A.CODIGO_USUARIO = G.CODIGO_USUARIO
LEFT JOIN ACCESOS H
ON A.CODIGO_USUARIO = H.CODIGO_USUARIO;

SELECT * FROM VW_USUARIOS;

SELECT * FROM MVW_USUARIOS;

